{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api';\nexport const getRestaurantById = async id => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/restaurants/${id}`);\n    return response.data;\n  } catch (error) {\n    throw new Error('Error fetching restaurant by ID');\n  }\n};\nexport const getRestaurants = async (page = 1, limit = 10) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/restaurants`, {\n      params: {\n        page,\n        limit\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error('Error fetching restaurants list');\n  }\n};\nexport const searchRestaurantsByLocation = async (latitude, longitude, radius) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/restaurants/search/location`, {\n      params: {\n        latitude,\n        longitude,\n        radius\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error('Error searching restaurants by location');\n  }\n};\nexport const searchRestaurantsByImage = async image => {\n  const formData = new FormData();\n  formData.append('image', image);\n  try {\n    const response = await axios.post(`${API_BASE_URL}/restaurants/image-search`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error('Error searching restaurants by image');\n  }\n};\nexport const detectFoodAndCuisine = async image => {\n  const formData = new FormData();\n  formData.append('image', image);\n  try {\n    const response = await axios.post(`${API_BASE_URL}/restaurants/food-detection`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error('Error detecting food and cuisine');\n  }\n};\nexport const getRestaurantsByCuisine = async (cuisine, page, limit) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/restaurants/filter`, {\n      params: {\n        cuisine,\n        page,\n        limit\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error('Error fetching restaurants by cuisine');\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","getRestaurantById","id","response","get","data","error","Error","getRestaurants","page","limit","params","searchRestaurantsByLocation","latitude","longitude","radius","searchRestaurantsByImage","image","formData","FormData","append","post","headers","detectFoodAndCuisine","getRestaurantsByCuisine","cuisine"],"sources":["C:/Users/goyal/OneDrive/Desktop/Typeface/zomato-app/frontend/src/services/apiService.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api';\n\nexport const getRestaurantById = async (id: string) => {\n    try {\n        const response = await axios.get(`${API_BASE_URL}/restaurants/${id}`);\n        return response.data;\n    } catch (error) {\n        throw new Error('Error fetching restaurant by ID');\n    }\n};\n\nexport const getRestaurants = async (page: number = 1, limit: number = 10) => {\n    try {\n        const response = await axios.get(`${API_BASE_URL}/restaurants`, {\n            params: { page, limit }\n        });\n        return response.data;\n    } catch (error) {\n        throw new Error('Error fetching restaurants list');\n    }\n};\n\nexport const searchRestaurantsByLocation = async (latitude: number, longitude: number, radius: number) => {\n    try {\n        const response = await axios.get(`${API_BASE_URL}/restaurants/search/location`, {\n            params: { latitude, longitude, radius }\n        });\n        return response.data;\n    } catch (error) {\n        throw new Error('Error searching restaurants by location');\n    }\n};\n\nexport const searchRestaurantsByImage = async (image: File) => {\n    const formData = new FormData();\n    formData.append('image', image);\n\n    try {\n        const response = await axios.post(`${API_BASE_URL}/restaurants/image-search`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        });\n        return response.data;\n    } catch (error) {\n        throw new Error('Error searching restaurants by image');\n    }\n};\n\nexport const detectFoodAndCuisine = async (image: File) => {\n    const formData = new FormData();\n    formData.append('image', image);\n\n    try {\n        const response = await axios.post(`${API_BASE_URL}/restaurants/food-detection`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n        });\n        return response.data;\n    } catch (error) {\n        throw new Error('Error detecting food and cuisine');\n    }\n};\n\nexport const getRestaurantsByCuisine = async (cuisine: string, page: number, limit: number) => {\n    try {\n        const response = await axios.get(`${API_BASE_URL}/restaurants/filter`, {\n            params: { cuisine, page, limit },\n        });\n        return response.data;\n    } catch (error) {\n        throw new Error('Error fetching restaurants by cuisine');\n    }\n\n    \n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}